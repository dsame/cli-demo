trigger:
  branches:
    include:
      - master
  paths:
    include:
      - {{rootdir}}/*
    exclude:
      - {{rootdir}}/README.md
      - {{rootdir}}/.azure-pipelines/*
      - {{rootdir}}/.gitignore
      - {{rootdir}}/.vscode/*

stages:
- stage: Build

  jobs:
  - job: Build_Test_Publish
    timeoutInMinutes: 20
    pool:
      vmImage: windows-2019
    variables:
      projectName: {{namespace}}
      projectDirectory: {{rootdir}}
      EnableDetectorPip: true
      tags: 'production'

    steps:
    - template: steps/conda-env.yml

    - template: steps/run-tests.yml

    - task: ComponentGovernanceComponentDetection@0
      displayName: Component Detection
      inputs:
        scanType: 'Register'
        verbosity: 'Normal'
        alertWarningLevel: 'High'

    - template: steps/package.yml

    - template: steps/code-signing.yml

    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: '.oml/package'
        targetPath: $(projectDirectory)/.oml/package

- stage: Deploy
  jobs:
  - deployment: Publish_Deploy
    pool:
      vmImage: windows-2019
    variables:
    - group: OML_KEYVAULT
    - name: EnableDetectorPip
      value: true
    environment: 'dlis-prod'
    strategy:
      # default deployment strategy
      runOnce:
        deploy:
          steps:
          - task: PipAuthenticate@0
            displayName: Authenticate PyPi Feeds
            inputs:
              artifactFeeds: AIPlatform

          - script: |
              pip install oml
            displayName: Install oml

          - task: CopyFiles@2
            displayName: Copy metadata file to root
            inputs:
              SourceFolder: $(Pipeline.Workspace)/.oml/package
              Contents: '**\oml.yml'
              TargetFolder: $(Pipeline.Workspace)
              flattenFolders: true

          - script: |
              oml publish
            displayName: Publish package to ADLS
            workingDirectory: $(Pipeline.Workspace)
            env:
              OML_CLI_KEY: $(omlclikey)

          - script: |
              oml dlis deploy -ns $(namespace) --custom-model-name $(deploymentName) -t  $(thumbprints) -e $(environments)
            displayName: Deploy
            workingDirectory: $(Pipeline.Workspace)
            env:
              OML_CLI_KEY: $(omlclikey)
